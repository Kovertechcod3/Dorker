/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Artist as PrismaArtist } from "@prisma/client";

export class ArtistServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ArtistCountArgs, "select">): Promise<number> {
    return this.prisma.artist.count(args);
  }

  async artists<T extends Prisma.ArtistFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistFindManyArgs>
  ): Promise<PrismaArtist[]> {
    return this.prisma.artist.findMany<Prisma.ArtistFindManyArgs>(args);
  }
  async artist<T extends Prisma.ArtistFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistFindUniqueArgs>
  ): Promise<PrismaArtist | null> {
    return this.prisma.artist.findUnique(args);
  }
  async createArtist<T extends Prisma.ArtistCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistCreateArgs>
  ): Promise<PrismaArtist> {
    return this.prisma.artist.create<T>(args);
  }
  async updateArtist<T extends Prisma.ArtistUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistUpdateArgs>
  ): Promise<PrismaArtist> {
    return this.prisma.artist.update<T>(args);
  }
  async deleteArtist<T extends Prisma.ArtistDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArtistDeleteArgs>
  ): Promise<PrismaArtist> {
    return this.prisma.artist.delete(args);
  }
}
